[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "madonna"
version = "0.2.0"
description = "Python semver parsing library."
readme = "README.md"
keywords = [
  "developer-tools",
  "parser",
  "semver",
]
license = { text = "MIT" }
maintainers = [
  { name = "Tom Fleet" },
  { email = "tomfleet2018@gmail.com" },
]
authors = [
  { name = "Tom Fleet" },
  { email = "tomfleet2018@gmail.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Typing :: Typed",
]
urls.Documentation = "https://FollowTheProcess.github.io/madonna/"
urls.Homepage = "https://github.com/FollowTheProcess/madonna"
urls.Source = "https://github.com/FollowTheProcess/madonna"

[tool.hatch.envs.default]
# Include dev dependencies in the default environment
description = """
Default environment for development, contains everything
you need to work on the project, installed by default.
"""
extra-dependencies = [
  "pytest",
  "black",
  "coverage[toml]",
  "mypy",
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "pre-commit",
  "pytest-cov",
  "covdefaults",
  "ruff",
]

[tool.hatch.envs.default.scripts]
check = [
  "pytest --cov ./src ./tests --doctest-modules ./src",
  "pre-commit run --all-files",
]

[tool.hatch.envs.tests]
template = "tests" # Don't inherit from default
description = """
Environment for running tests, contains only the
test dependencies and installs the project.
"""
dependencies = [
  "pytest",
  "pytest-cov",
  "coverage[toml]",
  "covdefaults",
]

[tool.hatch.envs.tests.scripts]
run = "pytest --cov ./src ./tests --doctest-modules ./src"

cov = [
  "run",
  "coverage xml",
]

[tool.hatch.envs.lint]
detached = true
description = """
Environment for running linters, contains only the linting
dependencies and does not install the project.
"""
dependencies = [
  "pre-commit",
]

[tool.hatch.envs.lint.scripts]
run = "pre-commit run --all-files"

[tool.hatch.envs.docs]
template = "docs" # Don't inherit from default
description = """
Environment for building and serving docs, contains only
the docs dependencies and does not install the project.
"""
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean"
serve = "mkdocs serve"
deploy = "mkdocs gh-deploy --force"

[tool.ruff]
target-version = "py38"
line-length = 120

lint.select = [
  "ANN", # Type annotations
  "ARG", # Unused arguments
  "B",   # Flake8 bugbear
  "BLE", # No blind excepts
  "C4",  # Flake8 comprehensions
  "C90", # Complexity
  "D",   # Pydocstyle
  # https://github.com/charliermarsh/ruff#supported-rules
  "E",   # Pycodestyle errors
  "ERA", # Commented out code
  "F",   # Pyflakes errors
  "I",   # Isort
  "N",   # PEP8 naming
  "PGH", # Pygrep hooks
  "PIE", # Flake8 pie
  "PT",  # Pytest style
  "PTH", # Use pathlib over os.path
  "RET", # Function returns
  "RUF", # Ruff specific rules
  "SIM", # Simplify
  "UP",  # All pyupgrade rules
  "W",   # Pycodestyle warnings
  "YTT", # Flake8 2020
]
lint.ignore = [
  "ANN101", # Missing type annotation for self in method
  "ANN102", # Missing type annotation for cls in classmethod
  "D105",   # Missing docstring in magic method (non init)
  "D200",   # One line docstring should all be on one line
  "D203",   # One blank line before class docstring
  "D205",   # One blank line required between summary line and description
  "D212",   # Multi-line docstring summary should be on the first line
  "D401",   # First line should be in imperative mood
  "D406",   # Section names should end with a newline
  "D407",   # Missing dashed underline after section
  "D417",   # Wants sphinx style docstrings
  "PT011",  # ValueError is too vague
]
lint.per-file-ignores."conftest.py" = [
  "TCH", # Conftest is only run for tests (with dev dependencies)
]
lint.per-file-ignores."tests/**/*.py" = [
  "ARG001", # Thinks pytest fixtures are unused arguments
  "D103",   # Missing docstring in tests
  "D104",   # Missing docstring in __init__.py in tests (which is fine)
  "FBT001", # Tests are allowed positional bools (fixtures etc.)
  "S101",   # Assert is allowed in tests (obviously)
  "TCH",    # Tests will be run with dev dependencies so we don't care
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.mccabe.max-complexity = 15

[tool.codespell]
skip = "*.svg"
ignore-words-list = "ines,Ines"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
]
xfail_strict = true
filterwarnings = [
  "error",
  "ignore::DeprecationWarning", # DeprecationWarning: read_binary is deprecated. Use files() instead. Comes from virtualenv
]
log_cli_level = "info"
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]

[tool.coverage.run]
plugins = [
  "covdefaults",
]

[tool.mypy]
files = [
  "**/*.py",
]
python_version = "3.8"
ignore_missing_imports = true
strict = true
pretty = true
disallow_untyped_decorators = false
show_error_codes = true
warn_unreachable = true
enable_error_code = [
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool",
]
