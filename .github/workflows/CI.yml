name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install poetry
          python3 -m pip install nox

      - name: Run Tests & Coverage
        run: nox --non-interactive --sessions "test-${{ matrix.python-version }}"

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install poetry
          python3 -m pip install nox

      - name: Cache Pre-commit Environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Lint
        run: nox --non-interactive --session "lint"

  docs:
    name: Docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install poetry
          python3 -m pip install nox

      - name: Build Docs
        run: nox --non-interactive --session "docs"

  publish-docs:
    name: Publish Docs
    runs-on: ubuntu-latest

    needs: docs

    # Only publish docs automatically on new release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install poetry
          python3 -m pip install nox

      - name: Deploy Docs to GitHub Pages
        env:
          # Use the built in CI GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          nox --non-interactive --session "deploy_docs"

  release:
    name: Release
    runs-on: ubuntu-latest

    needs: [test, lint, docs, publish-docs]

    # Only release on new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install poetry

      - name: Build sdist and wheel
        run: poetry build

      - name: Publish Distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          draft: false
          prerelease: false
          files: |
            dist/*
